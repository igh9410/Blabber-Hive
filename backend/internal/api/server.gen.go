// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/chats)
	ChatServiceCreateChatRoom(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ChatServiceCreateChatRoom operation middleware
func (siw *ServerInterfaceWrapper) ChatServiceCreateChatRoom(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChatServiceCreateChatRoom(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/chats", wrapper.ChatServiceCreateChatRoom)
}

type ChatServiceCreateChatRoomRequestObject struct {
	Body *ChatServiceCreateChatRoomJSONRequestBody
}

type ChatServiceCreateChatRoomResponseObject interface {
	VisitChatServiceCreateChatRoomResponse(w http.ResponseWriter) error
}

type ChatServiceCreateChatRoom200JSONResponse CreateChatRoomResponse

func (response ChatServiceCreateChatRoom200JSONResponse) VisitChatServiceCreateChatRoomResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ChatServiceCreateChatRoomdefaultJSONResponse struct {
	Body       Status
	StatusCode int
}

func (response ChatServiceCreateChatRoomdefaultJSONResponse) VisitChatServiceCreateChatRoomResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /api/chats)
	ChatServiceCreateChatRoom(ctx context.Context, request ChatServiceCreateChatRoomRequestObject) (ChatServiceCreateChatRoomResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ChatServiceCreateChatRoom operation middleware
func (sh *strictHandler) ChatServiceCreateChatRoom(ctx *gin.Context) {
	var request ChatServiceCreateChatRoomRequestObject

	var body ChatServiceCreateChatRoomJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChatServiceCreateChatRoom(ctx, request.(ChatServiceCreateChatRoomRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChatServiceCreateChatRoom")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChatServiceCreateChatRoomResponseObject); ok {
		if err := validResponse.VisitChatServiceCreateChatRoomResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWT2/jthP9KgP+focuoJXTzc2ndb3BIuihRpJLERhYihxJs6U4WnLkwA383QtScmzH",
	"bpNDexP/zXvz5pGjZ2W469mjl6jmzyqaFjudP5etljvmLn33gXsMQphXTEAtaBeSBjWHTouaK6sFPwp1",
	"qAol2x7VXEUJ5Bu1KxTZtPds2usOLyzsChXwx0ABrZo/jrvWL1G5+o5G0vFlJrIneoc/BoxyzvfvUd6M",
	"GHv2ES9IcCTO/wPWaq7+NztIOZt0nL2IeBHtK3PjcBVYuBrqhd+mcNpaEmKv3eoIUsKAhbIYTaA+Lau5",
	"WrIXTT6C9qBDRRJ02ELEQNrRn2ihwxh1g6Ad+waeSFrQ8DnRAGm1wBiuwgjSIuR5rvP3eZBSFa80+Dzm",
	"8/yK1cO7Qr2jFveiZYiXAb6Ni99GJIs1eYygwXFDRjvAEDhAxxbdmCpFiAOJrhxCzQEs1TUG9AJ94Cbo",
	"riPfAPoNBfZdqmEB5I0bbJq/u7l/gMXqNklt4W61zIMSbnPgIaKFaguPzd1quf6pFenjfDZrSNqhKg13",
	"syb05kMJN9q0B+r76ph9GaUNiNATGoxJPatFz6dUDFss9mmNB4tMZpyyKJpcLOF3HsBoDzV5CzwIdBwQ",
	"dJU+paV4okw63/ITCMMThz9Gh5AA+Vy5x8XqFr5gpMbD14EsHnIzjgdbNtm/OUPdU5zZvHeWIeKHc8ek",
	"JC7XM2ZNpiyfWjItxJYHZ6HCZG/0Qwcb7YZsq8cJOPSmXLLF9dlEwn55mcjL9aeD58gLNhiSxSbZzjkt",
	"wFGUhDWJHUcbGR3CNovzSnd4aDFgcoMGw13HHiIeB8hOjdl72UjCyTeJJwl28a2H5PypOFwZHYLO4wnq",
	"UjoWN+hSLT7W2mSrn1rptebk4cY3jmJbwsJvE9fLR4/OODbTRU/Giuly7Z10VJ/R/uWk3PoflqAmdLYA",
	"Dkehq1F+4wi9vOslSVPka84tgMSltfQu32PYkMFUDlWoDYY4inVVXpU/Jzm5R697UnN1XV6V18nOWtpc",
	"quT3WWoCedTz2HaSvjpJfmtPMU7bihrbG0b5he12vBhe0OcYuu8dmRxl9j0mQvuu/GavudgNd6fdNPWR",
	"PDF2tkz/09XVf0ZiaqCZxaknf/t1vIG1Hpz8a/hT07iA92VEmtwbDswKJbqJ6UfjqGJqvTta2f9DnOzY",
	"rXd/BQAA//95ikBoPwkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
